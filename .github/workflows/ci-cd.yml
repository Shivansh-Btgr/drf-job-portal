name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_jobapp
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "SECRET_KEY=test-secret-key-for-github-actions" >> $GITHUB_ENV
        echo "DEBUG=True" >> $GITHUB_ENV
        echo "DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_jobapp" >> $GITHUB_ENV
        echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> $GITHUB_ENV
    
    - name: Run migrations
      run: |
        python manage.py migrate
    
    - name: Run tests
      run: |
        python manage.py test
    
    - name: Run linting (optional)
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=migrations,venv,.venv

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t job-app:latest .
    
    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 8000:8000 \
          -e DEBUG=True \
          -e SECRET_KEY=test-key \
          -e ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0 \
          -e DATABASE_URL=sqlite:///db.sqlite3 \
          -e PORT=8000 \
          job-app:latest
        
        echo "Waiting for container to start..."
        sleep 20
        
        echo "Checking container logs..."
        docker logs test-container
        
        echo "Testing API endpoint..."
        curl -f http://localhost:8000/api/ || echo "API endpoint test failed"
        
        docker stop test-container
        docker rm test-container

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy notification
      run: |
        echo "ðŸš€ Ready for deployment!"
        echo "Docker image job-app:latest built successfully"
        echo "Add your deployment steps here (Railway, Heroku, DigitalOcean, etc.)"